package com.myshop.admin.controller;

import com.google.auth.oauth2.*;
import com.google.cloud.storage.BlobId;
import com.google.cloud.storage.BlobInfo;
import com.google.firebase.FirebaseOptions;
import com.myshop.admin.exception.UserNotFoundException;
import com.myshop.admin.model.Role;
import com.myshop.admin.model.User;
import com.myshop.admin.repository.RoleRepository;
import com.myshop.admin.service.UserService;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestMapping;
import com.google.firebase.cloud.StorageClient;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;

@Controller
@RequestMapping("/users")
public class UserController {


    @Autowired
    private UserService userService;

    @Autowired
    private RoleRepository roleRepository;

    @GetMapping("")
    public String listFirstPage() {
        return null;
    }

    @GetMapping("/page/{pageNum}")
    public String listByPage(Model model, @PathVariable("pageNum") int pageNum,
                             @RequestParam(value = "sortField", required = false, defaultValue = "id") String sortField,
                             @RequestParam(value = "sortDir", required = false, defaultValue = "asc") String sortDir,
                             @RequestParam(value = "keyword", required = false) String keyword) {
        Page<User> page = userService.listByPage(pageNum, sortField, sortDir, keyword);
        List<Role> roles = (List<Role>) roleRepository.findAll();
        List<User> userList = page.getContent();
        int startCount = (pageNum - 1) * UserService.USER_PER_PAGE + 1;
        int endCount = startCount + UserService.USER_PER_PAGE - 1;
        if (endCount > page.getTotalElements()) {
            endCount = (int) page.getTotalElements();
        }
        String reverseSortDir = sortDir.equals("asc") ? "desc" : "asc";
        model.addAttribute("keyword", keyword);
        model.addAttribute("reverseSortDir", reverseSortDir);
        model.addAttribute("sortDir", sortDir);
        model.addAttribute("sortField", sortField);
        model.addAttribute("currentPage", pageNum);
        model.addAttribute("totalPages", page.getTotalPages());
        model.addAttribute("startCount", startCount);
        model.addAttribute("endCount", endCount);
        model.addAttribute("totalItems", page.getTotalElements());
        model.addAttribute("userList", userList);
        model.addAttribute("roles", roles);
        return "users/users";

    }

    @GetMapping("/create_new_user")
    public String createUser(Model model) {
        List<Role> roles = (List<Role>) roleRepository.findAll();
        model.addAttribute("roles", roles);
        model.addAttribute("user", new User());
        model.addAttribute("pageTitle", "Create New User");
        return "users/user_form";
    }

    @PostMapping("/save")
    public String saveUser(@ModelAttribute("user") User user,
                           @RequestParam("fileImage") MultipartFile multipartFile,
                           RedirectAttributes redirectAttributes) throws IOException {
        if (!multipartFile.isEmpty()) {
            String fileName = multipartFile.getOriginalFilename();
            user.setPhotoUrl(fileName);
            User savedUser = userService.save(user);

            // Đường dẫn trong Firebase Storage, dùng thư mục UserImage và ID của người dùng
            String uploadDir = "UserImages/" + savedUser.getId();
            StorageClient.getInstance().bucket().get(uploadDir).delete();

            // Tạo BlobId và BlobInfo để tải file lên Firebase Storage
            BlobId blobId = BlobId.of("myshop-ebeb4.appspot.com", uploadDir + "/" + fileName);
            BlobInfo blobInfo = BlobInfo.newBuilder(blobId)
                    .setContentType(multipartFile.getContentType())
                    .build();

            // Upload file lên Firebase Storage
            StorageClient.getInstance().bucket().create(String.valueOf(blobInfo), multipartFile.getInputStream());

        } else {
            if (user.getPhotoUrl().isEmpty()) {
                user.setPhotoUrl(null);
            }
            userService.save(user);
        }
        redirectAttributes.addFlashAttribute("message_success", "The users has been saved successfully.");
        return "redirect:/users";
    }

    @GetMapping("/edit/{id}")
    public String editUser(Model model, @PathVariable("id") Integer id, RedirectAttributes redirectAttributes) {
        try {
            User user = userService.getUserById(id);
            List<Role> roles = (List<Role>) roleRepository.findAll();
            model.addAttribute("roles", roles);
            model.addAttribute("user", user);
            model.addAttribute("pageTitle", "Edit User (ID: " + id + ")");
            return "users/user_form";
        } catch (UserNotFoundException e) {
            redirectAttributes.addFlashAttribute("message_error", e.getMessage());
            return "redirect:/users";
        }
    }

    @GetMapping("{id}/enabled/{status}")
    public String updateUserStatus(@PathVariable("id") Integer id, @PathVariable("status") boolean status, RedirectAttributes redirectAttributes) {
        try {
            userService.updateUserStatus(id, status);
            redirectAttributes.addFlashAttribute("message_success", "The users has been " + (status ? "enabled" : "disabled") + " successfully.");
        } catch (UserNotFoundException e) {
            redirectAttributes.addFlashAttribute("message_error", e.getMessage());
        }
        return "redirect:/users";
    }

    @GetMapping("/delete/{id}")
    public String deleteUser(@PathVariable("id") Integer id, RedirectAttributes redirectAttributes) {
        try {
            String uploadDir = "UserImages/" + id;
            StorageClient.getInstance().bucket().get(uploadDir).delete();
            userService.delete(id);
            redirectAttributes.addFlashAttribute("message_success", "The users has been deleted successfully.");
        } catch (UserNotFoundException e) {
            redirectAttributes.addFlashAttribute("message_error", e.getMessage());
        }
        return "redirect:/users";
    }

//    @GetMapping("/export_csv")
//    public void exportToCSV(HttpServletResponse response) throws IOException {
//
//    }

}
