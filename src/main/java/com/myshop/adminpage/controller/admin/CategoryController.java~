package com.myshop.adminpage.controller.admin;

import com.google.cloud.storage.Blob;
import com.google.cloud.storage.BlobId;
import com.google.cloud.storage.BlobInfo;
import com.google.firebase.cloud.StorageClient;
import com.myshop.adminpage.Interface.CategoryServiceInf;
import com.myshop.adminpage.exception.CategoryNotFoundException;
import com.myshop.adminpage.model.Category;
import com.myshop.adminpage.repository.CategoryRepository;
import com.myshop.adminpage.service.admin.CategoryService;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.repository.query.Param;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

@Controller
@RequestMapping("/admin-category")
public class CategoryController {

    @Autowired
    private CategoryServiceInf categoryServiceInf;

    @Autowired
    private CategoryService categoryService;
    @Autowired
    private CategoryRepository categoryRepository;

    @GetMapping("")
    public String index(Model model, @Param("keyword") String keyword, @RequestParam(name = "pageNum", defaultValue = "1") Integer pageNum,
                        @RequestParam(name = "orderBy", defaultValue = "id") String sortField,
                        @RequestParam(name = "direction", defaultValue = "asc") String sortDir,
                        @RequestParam(name = "category_per_page", defaultValue = "5") Integer category_per_page) {
//        List<Category> categories = this.categoryServiceInf.findAll();

//        Page<Category> categories = this.categoryServiceInf.listByPage(keyword, pageNum, sortField, sortDir);
        Page<Category> categories = this.categoryServiceInf.listByPage2(keyword, pageNum, sortField, sortDir, category_per_page);


//        List<Category> categories = page.getContent();

//        categories = categoryServiceInf.listHierarchicalCategoriesInPage(categories, sortDir);

        CompletableFuture.runAsync(() -> {
            for (Category category : categories) {
                String photoUrl = category.getPhotoUrl();
                if (photoUrl != null && !photoUrl.isEmpty()) {
                    String uploadDir = "CategoryImages/" + category.getId() + "/" + photoUrl;
//                Blob blob = StorageClient.getInstance().bucket().get(uploadDir);
//                if (blob != null) {
//                    String imageUrl = "https://firebasestorage.googleapis.com/v0/b/myshop-ebeb4.appspot.com/o/" +
//                            URLEncoder.encode(uploadDir, StandardCharsets.UTF_8) +
//                            "?alt=media" + "&token=" + blob.getMediaLink();
//                    category.setPhotoUrl(imageUrl);
//                }
                    Blob blob = StorageClient.getInstance().bucket().get(uploadDir);
                    if (blob != null) {
                        String imageUrl = null;
                        try {
                            imageUrl = String.format(
                                    "https://firebasestorage.googleapis.com/v0/b/%s/o/%s?alt=media",
                                    "myshop-ebeb4.appspot.com",
                                    URLEncoder.encode(uploadDir, StandardCharsets.UTF_8.toString())
                            );
                        } catch (UnsupportedEncodingException e) {
                            throw new RuntimeException(e);
                        }
                        category.setPhotoUrl(imageUrl);
                    }

//                String imageUrl = String.format(
//                        "https://firebasestorage.googleapis.com/v0/b/%s/o/%s?alt=media",
//                        "myshop-ebeb4.appspot.com",
//                        URLEncoder.encode(uploadDir, StandardCharsets.UTF_8.toString())
//                );
//                category.setPhotoUrl(imageUrl);
                }
            }
        });

        for (Category category : categories) {
            if (!categoryRepository.findAllSubCategories(category.getId()).isEmpty()) {
                category.setHasChildren(true);
            } else {
                category.setHasChildren(false);
            }
        }

        for (Category category : categories) {
            if (!categoryRepository.findAllBrandsByCategoryId(category.getId()).isEmpty()) {
                category.setHasBrand(true);
            } else {
                category.setHasBrand(false);
            }
        }

        String defaultUrl = "/admin-category";

//        List<Category> categoryList = categoryServiceInf.findAll();
        model.addAttribute("keyword", keyword);
        model.addAttribute("categories", categories);
//        model.addAttribute("categoryList", categoryList);
        model.addAttribute("totalPages", categories.getTotalPages());
        model.addAttribute("totalItems", categories.getTotalElements());
        model.addAttribute("currentPage", pageNum);
        model.addAttribute("defaultUrl", defaultUrl);
        model.addAttribute("sortField", sortField);
        model.addAttribute("sortDir", sortDir);
        model.addAttribute("reverseSortDir", sortDir.equals("asc") ? "desc" : "asc");
        model.addAttribute("category_per_page", category_per_page);
        return "/admin/category/index";
    }


//    @GetMapping("/addCategory")
//    public String addCategory(Model model) {
//        model.addAttribute("category", new Category());
//        return "/admin/category/index";
//    }

    @PreAuthorize("hasRole('Admin') ")
    @Transactional
    @PostMapping("/save")
    public String addCategory(@ModelAttribute Category category, @RequestParam("imageFile") MultipartFile multipartFile,
                              RedirectAttributes redirectAttributes, HttpServletRequest request) throws Exception {
//        this.categoryServiceInf.save(category);
//        try {


        String errorMessage2 = categoryServiceInf.handlerExceptionAddCategory(category.getId(), category.getName(), category.getSlug());
        if (!"OK".equals(errorMessage2)) {
            redirectAttributes.addFlashAttribute("errorMessage", errorMessage2);
            redirectAttributes.addFlashAttribute("alertClass", "alert-danger");
            return "redirect:/admin-category";
        }

//        Category parent = category.getParent();
//        if (parent != null) {
//            if(categoryService.countByParentId(parent.getId()) > 0) {
//                parent.setHasChildren(true);
//            }
//        }


        if (!multipartFile.isEmpty()) {
            String oldFileName = category.getPhotoUrl();
            oldFileName = URLDecoder.decode(oldFileName, StandardCharsets.UTF_8);
            int lastIndex = oldFileName.lastIndexOf("/");
            if (lastIndex != -1) {
                oldFileName = oldFileName.substring(lastIndex + 1);
            }
            if (oldFileName.contains("?")) {
                oldFileName = oldFileName.substring(0, oldFileName.indexOf('?'));
            }
//            oldFileName = oldFileName.substring(oldFileName.indexOf('?') + 8);
            String fileName = multipartFile.getOriginalFilename();

            this.categoryServiceInf.save(category);

            // Đường dẫn trong Firebase Storage, dùng thư mục UserImage và ID của người dùng
            String uploadDir = "CategoryImages/" + category.getId();
//            StorageClient.getInstance().bucket().get(uploadDir).delete();
            // Tạo BlobId và BlobInfo để tải file lên Firebase Storage
            String newUploadDir = uploadDir + "/" + fileName;
            BlobId blobId = BlobId.of("myshop-ebeb4.appspot.com", newUploadDir);

            // Xóa tệp tin cũ nếu có
            String oldUploadDir = uploadDir + "/" + oldFileName;
            if (!oldUploadDir.equals(newUploadDir)) {
                category.setPhotoUrl(fileName);
//                this.categoryServiceInf.save(category);
                if (oldFileName != null && !oldFileName.isEmpty()) {
                    Blob blob = StorageClient.getInstance().bucket().get(oldUploadDir);
                    if (blob != null) {
                        blob.delete();
                    }
//                StorageClient.getInstance().bucket().get(oldUploadDir).delete();
                }

                // Đặt content type và kiểm tra null
                String contentType = multipartFile.getContentType();
                if (contentType == null) {
                    contentType = "application/octet-stream"; // Gán giá trị mặc định nếu null
                }
//            BlobInfo blobInfo = BlobInfo.newBuilder(blobId)
//                    .setContentType(contentType)
//                    .build();

                // Upload file lên Firebase Storage
                StorageClient.getInstance().bucket().create(newUploadDir, multipartFile.getInputStream(), contentType);
                String publicUrl = String.format(
                        "https://firebasestorage.googleapis.com/v0/b/%s/o/%s?alt=media",
                        "myshop-ebeb4.appspot.com",
                        URLEncoder.encode(newUploadDir, StandardCharsets.UTF_8.toString())
                );
                category.setPhotoUrl(publicUrl);  // Lưu URL công khai vào đối tượng Category
                this.categoryServiceInf.save(category);
            } else {
                category.setPhotoUrl(oldFileName);
                this.categoryServiceInf.save(category);
            }

        } else {
            if (category.getPhotoUrl().isEmpty()) {
                category.setPhotoUrl(null);
            }
            this.categoryServiceInf.save(category);
        }


        String keyword = request.getParameter("?keyword");
        String pageNum = request.getParameter("?pageNum");

        System.out.println(keyword + " " + pageNum);

        redirectAttributes.addFlashAttribute("message", "The category has been saved successfully!");
        redirectAttributes.addFlashAttribute("alertClass", "alert-success");
        redirectAttributes.addFlashAttribute("errorMessage", errorMessage2);
        redirectAttributes.addFlashAttribute("alertClass", "alert-danger");
        // Thêm các tham số vào redirectAttributes
//        if (keyword != null && !keyword.isEmpty() && pageNum.isEmpty()) {
//            return "redirect:/admin-category?keyword=" + keyword;
//        }
//        if (pageNum != null && !pageNum.isEmpty() && keyword.isEmpty()) {
//            return "redirect:/admin-category?pageNum=" + pageNum;
//        }
//        if (keyword != null && !keyword.isEmpty() && pageNum != null && !pageNum.isEmpty()) {
//            return "redirect:/admin-category?keyword=" + keyword + "&pageNum=" + pageNum;
//        }

        return "redirect:/admin-category";

//        StringBuilder redirectUrl = new StringBuilder("redirect:/admin-category");
//        if ((keyword != null && !keyword.isEmpty()) || (pageNum != null && !pageNum.isEmpty())) {
//            redirectUrl.append("?");
//            if (keyword != null && !keyword.isEmpty()) {
//                redirectUrl.append("keyword=").append(URLEncoder.encode(keyword, StandardCharsets.UTF_8)).append("&");
//            }
//            if (pageNum != null && !pageNum.isEmpty()) {
//                redirectUrl.append("pageNum=").append(pageNum);
//            }
//        }
//
//        return redirectUrl.toString();
//        } catch (Exception e) {
//            String message = categoryServiceInf.handlerExceptionAddCategory(category.getId(), category.getName(), category.getSlug());
//            redirectAttributes.addFlashAttribute("errorMessage", message);
//            redirectAttributes.addFlashAttribute("alertClass", "alert-danger");
//            return "redirect:/admin-category";
//        }

    }

    @PreAuthorize("hasRole('ADMIN') or hasRole('Editor1')")
    @GetMapping("/createCategory")
    public String createCategory(Model model) {
        List<Category> categoryInForm = this.categoryServiceInf.listHierarchicalCategoriesInForm();
        model.addAttribute("category", new Category());
        model.addAttribute("categoryInForm", categoryInForm);
        return "/admin/category/add";
    }

    @Transactional
    @PostMapping("/update")
    public String updateCategory(@ModelAttribute Category category, @RequestParam("imageFile") MultipartFile multipartFile,
                                 RedirectAttributes redirectAttributes, HttpServletRequest request) throws Exception {
//        this.categoryServiceInf.save(category);

//        try {

        String errorMessage = categoryServiceInf.handlerExceptionAddCategory(
                category.getId(), category.getName(), category.getSlug());
        String errorMessage2 = categoryServiceInf.validateCategoryParent(category);

        if (!"OK".equals(errorMessage)) {
            redirectAttributes.addFlashAttribute("errorMessage", errorMessage);
            redirectAttributes.addFlashAttribute("alertClass", "alert-danger");
            return "redirect:/admin-category/editCategory" + category.getId();
        }
        if (errorMessage2 != null) {
            redirectAttributes.addFlashAttribute("errorMessage2", errorMessage2);
            redirectAttributes.addFlashAttribute("alertClass", "alert-danger");
            return "redirect:/admin-category/editCategory" + category.getId();
        }

//            Category parentCategory = category.getParent();
//            if(parentCategory == null) {
//                if(categoryService.countByParentId(parentCategory.getId()) > 0) {
//                    parentCategory.setHasChildren(true);
//                } else {
//                    parentCategory.setHasChildren(false);
//                }
//            }

        if (!multipartFile.isEmpty()) {
            String oldFileName = category.getPhotoUrl();
            oldFileName = URLDecoder.decode(oldFileName, StandardCharsets.UTF_8);
            int lastIndex = oldFileName.lastIndexOf("/");
            if (lastIndex != -1) {
                oldFileName = oldFileName.substring(lastIndex + 1);
            }
            if (oldFileName.contains("?")) {
                oldFileName = oldFileName.substring(0, oldFileName.indexOf('?'));
            }
//            oldFileName = oldFileName.substring(oldFileName.indexOf('?') + 8);
            String fileName = multipartFile.getOriginalFilename();

            this.categoryServiceInf.save(category);

            // Đường dẫn trong Firebase Storage, dùng thư mục UserImage và ID của người dùng
            String uploadDir = "CategoryImages/" + category.getId();


//            StorageClient.getInstance().bucket().get(uploadDir).delete();

            // Tạo BlobId và BlobInfo để tải file lên Firebase Storage
            String newUploadDir = uploadDir + "/" + fileName;
            BlobId blobId = BlobId.of("myshop-ebeb4.appspot.com", newUploadDir);

            // Xóa tệp tin cũ nếu có
            String oldUploadDir = uploadDir + "/" + oldFileName;
            if (!oldUploadDir.equals(newUploadDir)) {
                category.setPhotoUrl(fileName);
//                this.categoryServiceInf.save(category);
                if (oldFileName != null && !oldFileName.isEmpty()) {
                    Blob blob = StorageClient.getInstance().bucket().get(oldUploadDir);
                    if (blob != null) {
                        blob.delete();
                    }
//                StorageClient.getInstance().bucket().get(oldUploadDir).delete();
                }

                // Đặt content type và kiểm tra null
                String contentType = multipartFile.getContentType();
                if (contentType == null) {
                    contentType = "application/octet-stream"; // Gán giá trị mặc định nếu null
                }
//            BlobInfo blobInfo = BlobInfo.newBuilder(blobId)
//                    .setContentType(contentType)
//                    .build();

                // Upload file lên Firebase Storage
                StorageClient.getInstance().bucket().create(newUploadDir, multipartFile.getInputStream(), contentType);
                String publicUrl = String.format(
                        "https://firebasestorage.googleapis.com/v0/b/%s/o/%s?alt=media",
                        "myshop-ebeb4.appspot.com",
                        URLEncoder.encode(newUploadDir, StandardCharsets.UTF_8.toString())
                );
                category.setPhotoUrl(publicUrl);  // Lưu URL công khai vào đối tượng Category
                this.categoryServiceInf.save(category);
            } else {
                category.setPhotoUrl(oldFileName);
                this.categoryServiceInf.save(category);
            }

        } else {
            if (category.getPhotoUrl().isEmpty()) {
                category.setPhotoUrl(null);
            }
            this.categoryServiceInf.save(category);
        }
//        } catch (IllegalArgumentException e) {
//            redirectAttributes.addFlashAttribute("errorMessage", e.getMessage());
//            redirectAttributes.addFlashAttribute("alertClass", "alert-danger");
//            return "redirect:/admin-category/editCategory" + category.getId();
//        }


        String keyword = request.getParameter("keyword");
        String pageNum = request.getParameter("pageNum");

        redirectAttributes.addFlashAttribute("message", "The category has been updated successfully!");
        redirectAttributes.addFlashAttribute("alertClass", "alert-success");
//        redirectAttributes.addFlashAttribute("errorMessage", errorMessage);
        redirectAttributes.addFlashAttribute("alertClass", "alert-danger");
        // Thêm các tham số vào redirectAttributes
//        if (keyword != null && !keyword.isEmpty() && pageNum.isEmpty()) {
//            return "redirect:/admin-category?keyword=" + keyword;
//        }
//        if (pageNum != null && !pageNum.isEmpty() && keyword.isEmpty()) {
//            return "redirect:/admin-category?pageNum=" + pageNum;
//        }
//        if (keyword != null && !keyword.isEmpty() && pageNum != null && !pageNum.isEmpty()) {
//            return "redirect:/admin-category?keyword=" + keyword + "&pageNum=" + pageNum;
//        }
        return "redirect:/admin-category";

//        StringBuilder redirectUrl = new StringBuilder("redirect:/admin-category");
//        if ((keyword != null && !keyword.isEmpty()) || (pageNum != null && !pageNum.isEmpty())) {
//            redirectUrl.append("?");
//            if (keyword != null && !keyword.isEmpty()) {
//                redirectUrl.append("keyword=").append(URLEncoder.encode(keyword, StandardCharsets.UTF_8)).append("&");
//            }
//            if (pageNum != null && !pageNum.isEmpty()) {
//                redirectUrl.append("pageNum=").append(pageNum);
//            }
//        }
//
//        return redirectUrl.toString();
//        } catch (Exception e) {
//            String message = categoryServiceInf.handlerExceptionAddCategory(category.getId(), category.getName(), category.getSlug());
//            redirectAttributes.addFlashAttribute("errorMessage", message);
//            redirectAttributes.addFlashAttribute("alertClass", "alert-danger");
//            return "redirect:/admin-category";
//        }

    }

    //    @PreAuthorize("hasRole('ADMIN')")
    @GetMapping("/deleteCategory/{id}")
    public String deleteCategory(@PathVariable Integer id, RedirectAttributes redirectAttributes) {
        Optional<Category> category = this.categoryServiceInf.findById(id);
        if (category.isPresent()) {
            String fileImage = category.get().getPhotoUrl();
            if (fileImage != null && !fileImage.isEmpty()) {
                fileImage = URLDecoder.decode(fileImage, StandardCharsets.UTF_8);
                int lastIndex = fileImage.lastIndexOf("/");
                if (lastIndex != -1) {
                    fileImage = fileImage.substring(lastIndex + 1);
                }
                if (fileImage.contains("?")) {
                    fileImage = fileImage.substring(0, fileImage.indexOf('?'));
                }
                String uploadDir = "CategoryImages/" + id + "/" + fileImage;
                StorageClient.getInstance().bucket().get(uploadDir).delete();
            }
            categoryServiceInf.deleteCategory(id);
            redirectAttributes.addFlashAttribute("message", "The category has been deleted successfully!");
        } else {
            throw new CategoryNotFoundException("Category not found");
        }
        return "redirect:/admin-category";
    }

    @GetMapping("/editCategory{id}")
    public String editCategory(@PathVariable Integer id, Model model, RedirectAttributes redirectAttributes) {
        try {
            Optional<Category> category = Optional.ofNullable(this.categoryServiceInf.getCategoryById(id));
            List<Category> categories = this.categoryServiceInf.listHierarchicalCategoriesInForm();
            List<Category> categoryList = this.categoryServiceInf.findAll();
//            List<Category> categories = this.categoryServiceInf.getCategoryHierarchy();
            categories.forEach(cate -> System.out.println(cate.getName()));
            if (category.isPresent()) {
                model.addAttribute("category", category.get());
                model.addAttribute("categories", categories);
                model.addAttribute("categoryList", categoryList);
                return "/admin/category/edit";
            }
        } catch (CategoryNotFoundException e) {
            redirectAttributes.addFlashAttribute("message", e.getMessage());
            return "redirect:/admin-category";
        }

        return "redirect:/admin-category";
//
//        model.addAttribute("category", this.categoryServiceInf.getCategoryById(id));
//
//        return "/admin/category/index";
    }

//    @PostMapping("/editCategory")
//    public String editCategory(@ModelAttribute Category category) {
//        this.categoryServiceInf.save(category);
//        return "redirect:/admin-category";
//    }

    @GetMapping("/updateStatus{id}/{status}")
    public String updateStatus(@PathVariable Integer id, @PathVariable boolean status) {
        try {
            this.categoryServiceInf.updateStatus(id, status);
        } catch (CategoryNotFoundException e) {
            return "redirect:/admin-category";
        }
        return "redirect:/admin-category";
    }

    @GetMapping("error")
    public String error() {
        return "/admin/category/error";
    }

}
