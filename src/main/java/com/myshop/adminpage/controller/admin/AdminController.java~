package com.myshop.adminpage.controller.admin;

//import com.myshop.adminpage.model.CustomUserDetails;

import com.google.cloud.storage.Blob;
import com.google.cloud.storage.BlobId;
import com.google.cloud.storage.BlobInfo;
import com.google.firebase.cloud.StorageClient;
import com.myshop.adminpage.Interface.UserServiceInf;
import com.myshop.adminpage.model.CustomUserDetails;
import com.myshop.adminpage.model.User;
import com.myshop.adminpage.service.admin.UserService;
import jakarta.servlet.http.HttpSession;
//import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.net.URLDecoder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;

@Controller
@RequestMapping("/admin")
public class AdminController {

    @Autowired
    private UserServiceInf userServiceInf;


    private final UserService userService;

    public AdminController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("")
    public String adminPage(HttpSession session) {
        CustomUserDetails customUserDetails = (CustomUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        session.setAttribute("user", customUserDetails);
        return "admin/index";
    }

//    @GetMapping("/my-profile")
//    public String myProfile(Model model) {
//        CustomUserDetails customUserDetails = (CustomUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
//        model.addAttribute("user", customUserDetails.getUser());
//        return "admin/profile";
//    }

    @GetMapping("/my-profile")
    public String myProfile(Model model, @AuthenticationPrincipal CustomUserDetails customUserDetails) {
//        CustomUserDetails customUserDetails = (CustomUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        User user = userServiceInf.findByUsername(customUserDetails.getUsername());
        model.addAttribute("user", user);
        return "admin/profile";
    }

    @PostMapping("/save")
    public String save(@ModelAttribute("user") User user,
                       @RequestParam(value = "imageFile") MultipartFile multipartFile,
                       @AuthenticationPrincipal CustomUserDetails loggedInUser,
                       RedirectAttributes redirectAttributes) throws Exception {
        try{
            if (!multipartFile.isEmpty()) {
                String oldFileName = user.getPhotoUrl();
                oldFileName = URLDecoder.decode(oldFileName, StandardCharsets.UTF_8);
                int lastIndex = oldFileName.lastIndexOf("/");
                if (lastIndex != -1) {
                    oldFileName = oldFileName.substring(lastIndex + 1);
                }
                if (oldFileName.contains("?")) {
                    oldFileName = oldFileName.substring(0, oldFileName.indexOf('?'));
                }
                String fileName = multipartFile.getOriginalFilename();
//            user.setPhotoUrl(fileName);
                userService.saveAccount(user);
                String uploadDir = "UserImages/" + user.getId();

                String newUploadDir = uploadDir + "/" + fileName;
                BlobId blobId = BlobId.of("myshop-ebeb4.appspot.com", newUploadDir);
                String oldUploadDir = uploadDir + "/" + oldFileName;

                if (!oldUploadDir.equals(newUploadDir)) {
                    user.setPhotoUrl(fileName);
                    if (oldFileName != null && !oldFileName.isEmpty()) {
                        Blob blob = StorageClient.getInstance().bucket().get(oldUploadDir);
                        blob.delete();
                    }
                    String contentType = multipartFile.getContentType();
                    if (contentType == null) {
                        contentType = "application/octet-stream";
                    }

                    StorageClient.getInstance().bucket().create(newUploadDir, multipartFile.getInputStream(), contentType);

                    String publicUrl = String.format(
                            "https://firebasestorage.googleapis.com/v0/b/%s/o/%s?alt=media",
                            "myshop-ebeb4.appspot.com",
                            URLEncoder.encode(newUploadDir, StandardCharsets.UTF_8.toString())
                    );
                    user.setPhotoUrl(publicUrl);
                    userService.saveAccount(user);
                } else {
                    user.setPhotoUrl(oldFileName);
                    userService.saveAccount(user);
                }
            } else {
                if (user.getPhotoUrl().isEmpty()) {
                    user.setPhotoUrl(loggedInUser.getUser().getPhotoUrl());
                }
                userService.saveAccount(user);
            }
        }catch (Exception e){
            e.printStackTrace();
            redirectAttributes.addFlashAttribute("message", e.getMessage());
            redirectAttributes.addFlashAttribute("alertClass", "alert-danger");
            return "redirect:/admin/my-profile";
        }


        loggedInUser.setFirstName(user.getFirstName());
        loggedInUser.setLastName(user.getLastName());
        loggedInUser.setAvatar(user.getPhotoUrl());

//        SecurityContextHolder.getContext().setAuthentication((Authentication) loggedInUser);

        redirectAttributes.addFlashAttribute("message", "Your profile has been updated successfully.");
        redirectAttributes.addFlashAttribute("alertClass", "alert-success");

        return "redirect:/admin/my-profile";
    }
//
//    @GetMapping("test")
//    public String test() {
//        return "admin/test";
//    }

//    @GetMapping("")
//    public String admin() {
//        return "admin/index";
//    }

//    @GetMapping("")
//    public String adminData(Model model) {
//        CustomUserDetails customUserDetails = (CustomUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
//        model.addAttribute("user", customUserDetails.getUser());
//        return "admin/fragments/navbar-header";
//    }
}
