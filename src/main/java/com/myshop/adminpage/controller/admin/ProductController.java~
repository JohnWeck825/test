package com.myshop.adminpage.controller.admin;

import com.google.cloud.storage.Blob;
import com.google.cloud.storage.BlobId;
import com.google.firebase.cloud.StorageClient;
import com.myshop.adminpage.Interface.CategoryServiceInf;
import com.myshop.adminpage.exception.CategoryNotFoundException;
import com.myshop.adminpage.exception.ProductNotFoundException;
import com.myshop.adminpage.model.CustomUserDetails;
import com.myshop.adminpage.model.Product;
import com.myshop.adminpage.model.ProductDetail;
import com.myshop.adminpage.model.ProductImage;
import com.myshop.adminpage.service.admin.BrandService;
import com.myshop.adminpage.service.admin.ProductService;
import com.myshop.adminpage.service.admin.SeriesService;
import com.myshop.adminpage.utils.FirebaseStorageUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.repository.query.Param;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.io.FileInputStream;
import java.io.IOException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

@Controller
@RequestMapping("/admin-product")
public class ProductController {

    @Autowired
    private ProductService productService;

    @Autowired
    private BrandService brandService;

    @Autowired
    private CategoryServiceInf categoryServiceInf;

    @Autowired
    private SeriesService seriesService;

    @GetMapping("")
    public String index(Model model, @Param("keyword") String keyword, @RequestParam(name = "pageNum", defaultValue = "1") Integer pageNum
            , @RequestParam(name = "orderBy", defaultValue = "id") String sortField, @RequestParam(name = "direction", defaultValue = "asc") String sortDir) {
        Page<Product> products = productService.listByPage(keyword, pageNum, sortField, sortDir);

        String defaultUrl = "/admin-product";
        model.addAttribute("products", products);
        model.addAttribute("keyword", keyword);
        model.addAttribute("defaultUrl", defaultUrl);
        model.addAttribute("currentPage", pageNum);
        model.addAttribute("totalPages", products.getTotalPages());
        model.addAttribute("totalItems", products.getTotalElements());
        model.addAttribute("sortField", sortField);
        model.addAttribute("sortDir", sortDir);
        model.addAttribute("reverseSortDir", sortDir.equals("asc") ? "desc" : "asc");
        return "/admin/product/index";
    }

    @GetMapping("/createProduct")
    public String createProduct(Model model) {
        Product product = new Product();
        product.setInStock(true);
        product.setActive(true);
        model.addAttribute("product", product);
        model.addAttribute("brands", brandService.findAll());
        model.addAttribute("categories", categoryServiceInf.listHierarchicalCategoriesInForm());
        model.addAttribute("series", seriesService.findAll());
//        return "admin/product/add";
        return "admin/product/product_form";
    }

    @GetMapping("/editProduct{id}")
    public String editProduct(@PathVariable("id") Integer id, Model model, RedirectAttributes redirectAttributes) {
        try {
            Optional<Product> product = Optional.ofNullable(productService.getProductById(id));
            if (product.isPresent()) {
                model.addAttribute("product", product.get());
                model.addAttribute("brands", brandService.findAll());
                model.addAttribute("categories", categoryServiceInf.listHierarchicalCategoriesInForm());
                model.addAttribute("series", seriesService.findAll());
//                return "/admin/product/edit";
                return "admin/product/product_form";
            }
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("message", e.getMessage());
            return "redirect:/admin-product";
        }
        return "redirect:/admin-product";
    }

    @GetMapping("/deleteProduct/{id}")
    public String deleteProduct(@PathVariable Integer id, RedirectAttributes redirectAttributes) {
//        try {
//            String mainImageFolder = "products-photos/" + id;
//            String extrasImageFolder = "products-photos/" + id + "/extras";
//
//            FirebaseStorageUtil.removeFolder(mainImageFolder);
//            FirebaseStorageUtil.removeFolder(extrasImageFolder);
//
//            productService.delete(id);
//            redirectAttributes.addFlashAttribute("message_success", "The product has been deleted successfully");
//        } catch (ProductNotFoundException ex) {
//            redirectAttributes.addFlashAttribute("message_error", ex.getMessage());
//        }
        productService.delete(id);

        return "redirect:/admin-product";
    }

    @PostMapping("/save")
    public String save(@ModelAttribute Product product, RedirectAttributes redirectAttributes,
                       @RequestParam(value = "imageFile") MultipartFile mainImage,
                       @RequestParam(value = "extraImageFiles", required = false) MultipartFile[] extraImageFiles,
                       @RequestParam(value = "detailIds", required = false) Integer[] detailIds,
                       @RequestParam(value = "detailNames", required = false) String[] detailNames,
                       @RequestParam(value = "detailValues", required = false) String[] detailValues,
                       @RequestParam(value = "imageIds", required = false) Integer[] imageIds,
                       @RequestParam(value = "imageNames", required = false) String[] imageNames,
                       @AuthenticationPrincipal CustomUserDetails loggedInUser
    ) throws ProductNotFoundException, Exception {
//        if (loggedInUser.hasRole("Sales Manager")) {
//            productService.savePrice(product);
//            redirectAttributes.addFlashAttribute("message", "The product has been saved successfully.");
//            return "redirect:/admin-product";
//        }

        // Xử lý ảnh chính
        handleMainImage(product, mainImage);

        // Xử lý ảnh phụ
//        handleExtraImages(product, extraImageFiles, imageIds);

//        setMainImage(product, mainImage);
//        setExistingExtraImages(imageIds, imageNames, product);
//        setNewExtraImages(extraImageFiles, product);

//        setProductDetails(detailIds, detailNames, detailValues, product);
        Set<ProductDetail> productDetails = setProductDetails(detailNames, detailValues, product);
        product.setAttributes(productDetails);
//        Product savedProduct = productService.save(product);
//        deleteExtraImageWereRemoveOnForm(savedProduct);
//        saveImagesProduct(mainImage, extraImageFiles, savedProduct);
        productService.save(product);
        redirectAttributes.addFlashAttribute("message", "The product has been created successfully.");
        return "redirect:/admin-product";
    }

    @GetMapping("/updateStatus{id}/{status}")
    public String updateStatus(@PathVariable Integer id, @PathVariable boolean status) {
        try {
            productService.updateStatus(id, status);
        } catch (CategoryNotFoundException e) {
            return "redirect:/admin-product";
        }
        return "redirect:/admin-product";
    }

    private void setMainImage(Product product, MultipartFile mainImage) throws Exception {

        if (!mainImage.isEmpty()) {
            String fileName = StringUtils.cleanPath(mainImage.getOriginalFilename());
            product.setMainImageUrl(fileName);
        }
    }

    private void setExistingExtraImages(Integer[] imageIds, String[] imageNames, Product product) {
        if (imageIds == null || imageNames == null || imageIds.length == 0 || imageNames.length == 0) return;
        if (imageIds.length > 0 && imageNames.length > 0) {
            Set<ProductImage> images = new LinkedHashSet<>();
            for (int i = 0; i < imageIds.length; i++) {
//                ProductImage image = new ProductImage();
//                image.setId(imageIds[i]);
//                image.setName(imageNames[i]);
//                image.setProduct(product);
//                images.add(image);
                images.add(new ProductImage(imageIds[i], imageNames[i], product));
            }
            product.setImages(images);
        }
    }

    private void setNewExtraImages(MultipartFile[] extraImageFiles, Product product) {
        if (extraImageFiles.length > 0) {
            for (var multipartFile : extraImageFiles) {
                String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
                if (!multipartFile.isEmpty()) {
                    product.addExtraImage(fileName, product);
                }
            }
        }
    }

    private void deleteExtraImageWereRemoveOnForm(Product savedProduct) {
        String uploadDir = "products-photos/" + savedProduct.getId() + "/extras";
        List<String> listObjectKeys = FirebaseStorageUtil.listFolder(uploadDir);

        for (String objectKey : listObjectKeys) {
            int lastIndexOfSlash = objectKey.lastIndexOf("/");
            String fileName = objectKey.substring(lastIndexOfSlash + 1);
            if (!savedProduct.containImageName(fileName)) {
                FirebaseStorageUtil.deleteFile(objectKey);
            }
        }
    }

    private void saveImagesProduct(MultipartFile mainImgMultipart, MultipartFile[] extraImgsMultipart, Product savedProduct) throws IOException {
        if (!mainImgMultipart.isEmpty()) {
            String uploadDir = "products-photos/" + savedProduct.getId();
            List<String> listObjectKeys = FirebaseStorageUtil.listFolder(uploadDir + "/");

            for (String objectKey : listObjectKeys) {
                if (!objectKey.contains("/extras/")) {
                    FirebaseStorageUtil.deleteFile(objectKey);
                }
            }

            FirebaseStorageUtil.uploadFile(uploadDir, savedProduct.getMainImageUrl(), mainImgMultipart.getInputStream());
        }

        if (extraImgsMultipart.length > 0) {
            String uploadDir = "products-photos/" + savedProduct.getId() + "/extras";

            for (MultipartFile multipart : extraImgsMultipart) {
                if (!multipart.isEmpty()) {
                    String fileName = StringUtils.cleanPath(multipart.getOriginalFilename());
                    FirebaseStorageUtil.uploadFile(uploadDir, fileName, multipart.getInputStream());
                }
            }
        }
    }

//    public void setProductDetails(Integer[] detailIds, String[] detailNames, String[] detailValues, Product product) {
//        if (detailNames == null || detailValues == null || detailNames.length == 0 || detailValues.length == 0) return;
//        if (detailIds.length > 0 && detailNames.length > 0) {
//            for (int i = 0; i < detailNames.length; i++) {
//                if (detailIds[i] != null) {
//                    product.addDetail(detailIds[i], detailNames[i], detailValues[i], product);
//                } else if (!detailNames[i].isEmpty() && !detailValues[i].isEmpty()) {
//                    product.addDetail(detailNames[i], detailValues[i], product);
//                }
//            }
//        }
//    }

    public Set<ProductDetail> setProductDetails(String[] detailNames, String[] detailValues, Product product) {
        if (detailNames == null || detailValues == null || detailNames.length == 0 || detailValues.length == 0) {
            return null;
        }
        Set<ProductDetail> productDetails = new LinkedHashSet<>();
        for (int i = 0; i < detailNames.length; i++) {
            if (!detailNames[i].isEmpty() && !detailValues[i].isEmpty()) {
//                ProductDetail detail = new ProductDetail(detailNames[i], detailValues[i], product);
                ProductDetail detail = new ProductDetail();
                detail.setName(detailNames[i]);
                detail.setValue(detailValues[i]);
                detail.setProduct(product);
                productDetails.add(detail);
            }
        }
        return productDetails;
    }

    private void handleMainImage(Product product, MultipartFile mainImage) throws Exception {
        if (!mainImage.isEmpty()) {
            String oldMainImage = product.getMainImageUrl();
            oldMainImage = URLDecoder.decode(oldMainImage, StandardCharsets.UTF_8);
            int lastIndex = oldMainImage.lastIndexOf("/");
            if (lastIndex != -1) {
                oldMainImage = oldMainImage.substring(lastIndex + 1);
            }
            if (oldMainImage.contains("?")) {
                oldMainImage = oldMainImage.substring(0, oldMainImage.indexOf('?'));
            }

            String fileName = mainImage.getOriginalFilename();
//            product.setMainImageUrl(fileName);
            this.productService.save(product);
            String uploadDir = "ProductImages/" + product.getId();
            String newMainImageUploadDir = uploadDir + "/" + fileName;

            String oldUploadDir = uploadDir + "/" + oldMainImage;

            if (!oldUploadDir.equals(newMainImageUploadDir)) {
                product.setMainImageUrl(fileName);
                // Xóa tệp tin cũ nếu có
                if (oldMainImage != null && !oldMainImage.isEmpty()) {
                    Blob blob = StorageClient.getInstance().bucket().get(oldUploadDir);
                    if (blob != null) {
                        blob.delete();
                    }
                }
                // Đặt content type và kiểm tra null
                String contentType = mainImage.getContentType();
                if (contentType == null) {
                    contentType = "application/octet-stream"; // Gán giá trị mặc định nếu null
                }

                // Upload file lên Firebase Storage
                StorageClient.getInstance().bucket().create(newMainImageUploadDir, mainImage.getInputStream(), contentType);
                String publicUrl = String.format(
                        "https://firebasestorage.googleapis.com/v0/b/%s/o/%s?alt=media",
                        "myshop-ebeb4.appspot.com",
                        URLEncoder.encode(newMainImageUploadDir, StandardCharsets.UTF_8.toString())
                );
                product.setMainImageUrl(publicUrl);  // Lưu URL công khai vào đối tượng Product
                this.productService.save(product);
            } else {
                product.setMainImageUrl(oldMainImage);
                this.productService.save(product);
            }

        }
//        else if (product.getMainImageUrl().isEmpty()) {
//            product.setMainImageUrl(null);
//        }
        else {
            if (product.getMainImageUrl().isEmpty()) {
                product.setMainImageUrl(null);
            }
            this.productService.save(product);
        }
    }

//    private void handleExtraImages(Product product, MultipartFile[] extraImageFiles, Integer[] imageIds) throws Exception {
//        // Xử lý ảnh phụ đã có
//        if (imageIds != null) {
//            for (int i = 0; i < imageIds.length; i++) {
//                if (imageIds[i] != null) {
//                    String oldExtraImage = URLDecoder.decode(imageNames[i], StandardCharsets.UTF_8);
//                    int lastIndex = oldExtraImage.lastIndexOf("/");
//                    if (lastIndex != -1) {
//                        oldExtraImage = oldExtraImage.substring(lastIndex + 1);
//                    }
//
//                    String oldUploadDir = "products-photos/" + product.getId() + "/extras/" + oldExtraImage;
//
//                    // Xóa tệp tin cũ nếu có
//                    Blob blob = StorageClient.getInstance().bucket().get(oldUploadDir);
//                    if (blob != null) {
//                        blob.delete();
//                    }
//                }
//            }
//        }
//
//        // Xử lý ảnh phụ mới
//        if (extraImageFiles != null && extraImageFiles.length > 0) {
//            for (MultipartFile extraImage : extraImageFiles) {
//                if (!extraImage.isEmpty()) {
//                    String fileName = extraImage.getOriginalFilename();
//                    String uploadDir = "products-photos/" + product.getId() + "/extras";
//                    String extraImageUploadDir = uploadDir + "/" + fileName;
//
//                    // Đặt content type và kiểm tra null
//                    String contentType = extraImage.getContentType();
//                    if (contentType == null) {
//                        contentType = "application/octet-stream"; // Gán giá trị mặc định nếu null
//                    }
//
//                    // Upload file lên Firebase Storage
//                    StorageClient.getInstance().bucket().create(extraImageUploadDir, extraImage.getInputStream(), contentType);
//                    String publicUrl = String.format(
//                            "https://firebasestorage.googleapis.com/v0/b/%s/o/%s?alt=media",
//                            "myshop-ebeb4.appspot.com",
//                            URLEncoder.encode(extraImageUploadDir, StandardCharsets.UTF_8.toString())
//                    );
//                    product.addExtraImage(publicUrl, product); // Thêm URL ảnh phụ vào sản phẩm
//                }
//            }
//        }
//    }

}

//        if (!mainImage.isEmpty()) {
//            String oldMainImage = product.getImageUrl();
//            oldMainImage = URLDecoder.decode(oldMainImage, StandardCharsets.UTF_8);
//            int lastIndex = oldMainImage.lastIndexOf("/");
//            if (lastIndex != -1) {
//                oldMainImage = oldMainImage.substring(lastIndex + 1);
//            }
//            if (oldMainImage.contains("?")) {
//                oldMainImage = oldMainImage.substring(0, oldMainImage.indexOf('?'));
//            }
//
//            String fileName = mainImage.getOriginalFilename();
//            productService.save(product);
//            String uploadDir = "ProductImages/" + product.getId();
//            String newMainImageUploadDir = uploadDir + "/" + fileName;
//            BlobId blobId = BlobId.of("myshop-ebeb4.appspot.com", newMainImageUploadDir);
//
//            String oldUploadDir = uploadDir + "/" + oldMainImage;
//            // Xóa tệp tin cũ nếu có
//
//            if (!oldUploadDir.equals(newMainImageUploadDir)) {
//                product.setImageUrl(fileName);
////                this.categoryServiceInf.save(category);
//                if (oldMainImage != null && !oldMainImage.isEmpty()) {
//                    Blob blob = StorageClient.getInstance().bucket().get(oldUploadDir);
//                    if (blob != null) {
//                        blob.delete();
//                    }
////                StorageClient.getInstance().bucket().get(oldUploadDir).delete();
//                }
//
//                // Đặt content type và kiểm tra null
//                String contentType = mainImage.getContentType();
//                if (contentType == null) {
//                    contentType = "application/octet-stream"; // Gán giá trị mặc định nếu null
//                }
//
//                // Upload file lên Firebase Storage
//                StorageClient.getInstance().bucket().create(newMainImageUploadDir, mainImage.getInputStream(), contentType);
//                String publicUrl = String.format(
//                        "https://firebasestorage.googleapis.com/v0/b/%s/o/%s?alt=media",
//                        "myshop-ebeb4.appspot.com",
//                        URLEncoder.encode(newMainImageUploadDir, StandardCharsets.UTF_8.toString())
//                );
//                product.setImageUrl(publicUrl);  // Lưu URL công khai vào đối tượng Brand
//                this.productService.save(product);
//            } else {
//                product.setImageUrl(oldMainImage);
//                this.productService.save(product);
//            }
//
//        } else {
//            if (product.getImageUrl().isEmpty()) {
//                product.setImageUrl(null);
//            }
//            this.productService.save(product);
//        }